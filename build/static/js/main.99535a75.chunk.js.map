{"version":3,"sources":["services/persons.js","components/EntryFilterInput.js","components/NewEntryForm.js","components/EntryList.js","components/TemporaryMessage.js","components/TemporaryErrorMessage.js","components/TemporarySuccessMessage.js","App.js","index.js"],"names":["baseUrl","personService","getAll","a","axios","get","response","data","addNew","person","post","deletePerson","delete","id","updatePerson","updatedPerson","put","EntryFilterInput","filterText","setFilterText","value","onChange","e","target","NewEntryForm","persons","setPersons","setSuccessMessage","setErrorMessage","useState","newName","setNewName","newPhoneNumber","setNewPhoneNumber","addNewPerson","console","log","name","newPersonOnServer","concat","text","timeout","time","Date","now","config","updateNumber","personOnServer","map","number","status","filter","preventDefault","trimmedNewName","trim","trimmedNewNumber","duplicate","find","window","confirm","onSubmit","required","type","EntryList","p","filteredPersons","toLowerCase","indexOf","length","onClick","TemporaryMessage","style","drawMessage","setDrawMessage","useEffect","thereIsText","timeoutId","setTimeout","clearTimeout","errorMessageStyle","fontSize","color","borderStyle","borderColor","borderWidth","margin","boxShadow","padding","TemporaryErrorMessage","successMessageStyle","TemporarySuccessMessage","App","successMessage","errorMessage","personsOnServer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99535a75.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseUrl = '/api/persons';\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl);\n  return response.data;\n};\n\nconst addNew = async person => {\n  const response = await axios.post(baseUrl, person);\n  return response.data;\n};\n\nconst deletePerson = async person => {\n  const response = await axios.delete(`${baseUrl}/${person.id}`);\n  return response.data;\n};\n\nconst updatePerson = async updatedPerson => {\n  const response = await axios.put(\n    `${baseUrl}/${updatedPerson.id}`, \n    updatedPerson\n  );\n  return response.data;\n};\n\nconst personService = { getAll, addNew, deletePerson, updatePerson };\nexport default personService;","const EntryFilterInput = ({ filterText, setFilterText }) => (\n  <label>\n    filter: {' '}\n    <input \n      value={filterText}\n      onChange={e => setFilterText(e.target.value)}\n    />\n  </label>\n);\n\nexport default EntryFilterInput;","import { useState } from 'react';\nimport personService from '../services/persons';\n\n// Allows adding to and updating entries in the phonebook\nconst NewEntryForm = ({ \n  persons,\n  setPersons, \n  setSuccessMessage, \n  setErrorMessage \n}) => {\n  const [newName, setNewName] = useState('');\n  const [newPhoneNumber, setNewPhoneNumber] = useState('');\n\n  // Adds a new person to both the server and the persons state array.\n  async function addNewPerson(person) {\n    try {\n      console.log(`Posting \"${person.name}\" to the server...`);\n      const newPersonOnServer = await personService.addNew(person);\n      console.log(`...posted \"${person.name}\" with id`, newPersonOnServer.id);\n      \n      setPersons(persons.concat(newPersonOnServer));\n      setSuccessMessage({ \n        text: `Added ${newPersonOnServer.name} to the phonebook.`,\n        timeout: 5000,\n        time: Date.now()\n      });\n    } catch (error) {\n      console.log(`...FAILED adding \"${person.name}\" to the server.`);\n      console.log(error.config);\n      setErrorMessage({\n        text: `Error: Adding ${person.name} failed!`,\n        timeout: 5000,\n        time: Date.now()\n      });\n    }\n  }\n\n  // Updates the number of a person on both the server and the persons state \n  // array.\n  async function updateNumber(updatedPerson) {\n    try {\n      console.log(`Updating \"${updatedPerson.name}\"'s number on the server...`);\n      const personOnServer = await personService.updatePerson(updatedPerson);\n      console.log(`...updated \"${updatedPerson.name}\"'s number.`);\n      \n      setPersons(persons.map(\n        person => person.id === personOnServer.id \n          ? personOnServer \n          : person\n      ));\n      setSuccessMessage({\n        text: `Updated ${updatedPerson.name}'s number to ` +\n              `${updatedPerson.number}`,\n        timeout: 5000,\n        time: Date.now()\n      });\n\n    } catch (error) {\n\n      console.log(\n        `...FAILED updating \"${updatedPerson.name}\"'s number on the server.`\n      );\n      console.log(error.config);\n\n      // check if the person is missing on the server and if yes, remove it\n      if (error.response && error.response.status === 404) {\n        setPersons(persons.filter(person => person.id !== updatedPerson.id));\n        setErrorMessage({\n          text: `Error: ${updatedPerson.name} has already been removed from ` +\n                `the server`,\n          timeout: 5000,\n          time: Date.now()\n        });\n      } else {\n        setErrorMessage({\n          text: `Error: Updating ${updatedPerson.name}'s number failed!`,\n          timeout: 5000,\n          time: Date.now()\n        });\n      }\n    }\n  }\n\n  // Handles the submits though the form.\n  async function handleNewPersonSubmit(e) {\n    e.preventDefault();\n\n    console.log('Called handleNewPersonSubmit...');\n\n    const trimmedNewName = newName.trim();\n    const trimmedNewNumber = newPhoneNumber.trim();\n\n    const duplicate = persons.find(person => person.name === trimmedNewName);\n    // Deal with cases where a person's name is already in the phonebook.\n    if (duplicate) {\n      console.log('duplicated name');\n      // If their number is also identical, just don't add them.\n      if (duplicate.number === trimmedNewNumber) {\n        console.log('and same number');\n        console.log('error message at', Date.now());\n        setErrorMessage({\n          text: `There is already an entry for ${duplicate.name} in the ` +\n                `phonebook.`,\n          timeout: 5000,\n          time: Date.now()\n        });\n        return;\n      }\n      // If the number is different, ask the user whether they want to update it\n      if (window.confirm(\n        `${duplicate.name} already has an entry in the phone book. Do you ` +\n        `want to update their phone number to ${trimmedNewNumber}? ` +\n        `(current number: ${duplicate.number})`\n      )) {\n        await updateNumber({ ...duplicate, number: trimmedNewNumber });\n        setNewName('');\n        setNewPhoneNumber('');\n        return;\n      } else {\n        return;\n      }\n    }\n\n    await addNewPerson({\n      name: trimmedNewName,\n      number: trimmedNewNumber\n    });\n    setNewName('');\n    setNewPhoneNumber('');\n  }\n\n  return(\n    <form onSubmit={handleNewPersonSubmit}>\n      <label>\n        {'name: '}\n        <input\n          value={newName}\n          onChange={e => setNewName(e.target.value)}\n          required={true}\n        />\n      </label>\n      <br />\n      <label>\n        {'phone number: '}\n        <input\n          value={newPhoneNumber}\n          onChange={e => setNewPhoneNumber(e.target.value)}\n          required={true}\n        />\n      </label>\n      <br />\n      <button type=\"submit\"> add </button>\n    </form>\n  );\n};\n\nexport default NewEntryForm;\n","import personService from \"../services/persons\";\n\nconst EntryList = ({ \n  persons, \n  setPersons, \n  filterText, \n  setSuccessMessage,\n  setErrorMessage\n}) => {\n\n  async function deletePerson(person) {\n    if (!window.confirm(`Do you really want to delete ${person.name}?`)) {\n      return;\n    }\n\n    try {\n\n      console.log(`Deleting \"${person.name}\" from the server...`);\n      await personService.deletePerson(person);\n      console.log(`...finished deleting \"${person.name}\" from the server.`);\n\n      setPersons(persons.filter(p => p.id !== person.id));\n      setSuccessMessage({ text: 'Deleted ' + person.name, timeout: 5000 });\n\n    } catch (error) {\n\n      // if the person has already been deleted on the server, everything's fine\n      if (error.response && error.response.status === 404) {\n        setPersons(persons.filter(p => p.id !== person.id));\n        setSuccessMessage({ text: 'Deleted ' + person.name, timeout: 5000 });\n      } else {\n        console.log(`...FAILED deleting \"${person.name}\" from the server.`);\n        console.log(error.config);\n        \n        setErrorMessage({\n          text: `Error: Deleting \"${person.name}\" failed!`, \n          timeout: 5000\n        });\n      }\n    }\n  }\n\n  let filteredPersons = [];\n\n  if (filterText.trim() === '') {\n    filteredPersons = persons;\n  } else {\n    filteredPersons = persons.filter(person => (\n      person.name.toLowerCase().indexOf(\n        filterText.toLowerCase().trim()\n      ) !== -1\n    ));\n  }\n\n  return(\n    filteredPersons.length === 0\n      ? <p>No person found for{` \"${filterText}\"`}</p>\n      : filteredPersons.map(person => (\n          <li key={person.name}>\n            {`${person.name}: ${person.number} `}\n            <button onClick={() => deletePerson(person)}>\n              delete\n            </button>\n          </li>\n    ))\n  );\n};\n\nexport default EntryList;","import { useState, useEffect } from 'react';\n\n// Renders a message for a specified time and returns null afterwards.\n// Renders the message indefinitely if timeout is set to null.\nconst TemporaryMessage = ({ text, timeout, time, style }) => {\n  const [drawMessage, setDrawMessage] = useState(false);\n\n  // Whenever text, timeout and/or time change fire this effect to determine \n  // whether there is a message to be rendered and optionally set up a timeout\n  // for it.\n  useEffect(\n    () => {\n      console.log('Start effect...');\n      \n      const thereIsText = text && text !== '';\n      \n      setDrawMessage(thereIsText);\n      console.log('set drawMessage to', thereIsText, `for text \"${text}\"`);\n      \n      // If there is a message and timeout data, set up a timeout and return a \n      // clean up function.\n      if (thereIsText && timeout && timeout > 0) {\n        const timeoutId = setTimeout(() => {\n          setDrawMessage(false);\n          console.log('set drawMessage to', false, 'after timeout');\n        }, timeout);\n        console.log(\n          'set up a timeout with id', timeoutId, \n          'for', timeout / 1000, 's'\n        );\n        console.log('...end effect.');\n        return (() => {\n          clearTimeout(timeoutId);\n          console.log('clear timeout with id', timeoutId);\n        });\n      }\n      \n      console.log('...end effect.');\n    },\n    [text, timeout, time]\n  );\n\n  return (\n    drawMessage\n      ? <div style={style}>\n          {text + ' '}\n          <button onClick={() => setDrawMessage(false)}> X </button>\n        </div>\n      : null\n  );\n};\n\nexport default TemporaryMessage;","import TemporaryMessage from './TemporaryMessage';\n\nconst errorMessageStyle = {\n  fontSize: 'large',\n  color: 'red',\n  borderStyle: 'ridge',\n  borderColor: 'red',\n  borderWidth: 7,\n  // borderImage: 'radial-gradient(at top left, red, orange) 1',\n  margin: 10,\n  boxShadow: '0px 0px 10px 3px grey',\n  padding: 10\n};\n\nconst TemporaryErrorMessage = ({ text, timeout, time }) => {\n  return (\n    <TemporaryMessage \n      text={text} \n      timeout={timeout}\n      time={time}\n      style={errorMessageStyle}\n    />\n  );\n};\n\nexport default TemporaryErrorMessage;","import TemporaryMessage from './TemporaryMessage';\n\nconst successMessageStyle = {\n  fontSize: 'large',\n  color: 'green',\n  borderStyle: 'ridge',\n  borderColor: 'green',\n  borderWidth: 7,\n  // borderImage: 'radial-gradient(at top left, green, lightgreen) 1',\n  margin: 10,\n  boxShadow: '0px 0px 10px 3px grey',\n  padding: 10\n};\n\nconst TemporarySuccessMessage = ({ text, timeout, time }) => {\n  return (\n    <TemporaryMessage \n      text={text} \n      timeout={timeout}\n      time={time} \n      style={successMessageStyle}\n    />\n  );\n};\n\nexport default TemporarySuccessMessage;","import { useState, useEffect } from 'react';\nimport personService from './services/persons';\n\nimport EntryFilterInput from './components/EntryFilterInput';\nimport NewEntryForm from './components/NewEntryForm';\nimport EntryList from './components/EntryList';\nimport TemporaryErrorMessage from './components/TemporaryErrorMessage';\nimport TemporarySuccessMessage from './components/TemporarySuccessMessage';\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [filterText, setFilterText] = useState('');\n  // Since the messages won't update as long as text and timeout remain the \n  // same, the time attribute is used to determine whether the user has \n  // triggered the same message multiple times in a row.\n  const [successMessage, setSuccessMessage] = useState({\n    text: '',\n    timeout: 0,\n    time: Date.now()\n  });\n  const [errorMessage, setErrorMessage] = useState({\n    text: '',\n    timeout: 0,\n    time: Date.now()\n  });\n\n  useEffect(() => {\n    (async () => {\n      console.log('Fetching persons from server...');\n      const personsOnServer = await personService.getAll();\n      console.log(`...fetched ${personsOnServer.length} persons.`);\n      setPersons(personsOnServer);\n    })();\n  }, []);\n\n  // It would be more convenient to simply reset the error message inside of the\n  // TemporaryMessage components but that's not really their responsibility IMO.\n  // So effectively I have designed this for a hypothetical scenario where other\n  // components might want to use the messages without having to worry about the \n  // timeouts making the messages disappear.\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <TemporaryErrorMessage \n        text={errorMessage.text} \n        timeout={errorMessage.timeout}\n        time={errorMessage.time}\n      />\n      <TemporarySuccessMessage \n        text={successMessage.text} \n        timeout={successMessage.timeout}\n        time={successMessage.time}\n      />\n      <h2>Filter entries</h2>\n      <EntryFilterInput \n        filterText={filterText} \n        setFilterText={setFilterText} \n      />\n      <h2>Add a new entry</h2>\n      <NewEntryForm \n        persons={persons}\n        setPersons={setPersons}\n        setErrorMessage={setErrorMessage}\n        setSuccessMessage={setSuccessMessage}\n      />\n      <h2>Entries</h2>\n      <EntryList \n        persons={persons}\n        setPersons={setPersons}\n        filterText={filterText}\n        setErrorMessage={setErrorMessage}\n        setSuccessMessage={setSuccessMessage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}